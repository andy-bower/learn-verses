#!/bin/bash
#
# SPDX-License-Identifier: MIT
# SPDX-FileCopyrightText: (c) Copyright 2024 Andrew Bower
#
# Utility for helping to learn the words to songs, e.g.
#
#   ./learn-verses texts/Litanei
#
# Type an attempt for each line in turn after the song
# title is printed.

# State machine:
#   HEADER --[underlining]--> CONTENT
state="HEADER"

# Patterns to canonicalise lines for comparison
declare -a strip_regexes=( \
  "s/[[:punct:]]//g" \
  "s/^[[:space:]]*//" \
  "s/[[:space:]]*$//g" \
  "s/[[:space:]]+/\x20/g" \
  "s/^[[:space:][:punct:][:digit:]]+//g" \
)
function strip {
  sed -r $(for regex in "${strip_regexes[@]}"; do printf -- '-e %s ' "$regex"; done) | tr [:upper:] [:lower:]
}

count_good=0
count_bad=0
finished=false

# Read each line of reference text
while IFS= read -u4 -r LINE
do
  if [[ $state == HEADER || "$LINE" =~ ^[[:space:]]*$ ]]
  then
    if [[ "$LINE" =~ ^[[:space:]]*[-=]+[[:space:]]*$ ]]
    then
      state=CONTENT
    fi
    printf "%s\n" "$LINE"
    continue
  fi

  # Get the user's attempt  
  $finished || IFS='' read -p '> ' -e -r ATTEMPT || finished=true

  # Canonicalise both lines
  a=$(echo "$ATTEMPT" | strip)
  b=$(echo "$LINE" | strip)
  printf '= %s\n' "$LINE"

  # Check for correctness
  if [[ "$a" != "$b" ]] || $finished
  then
    count_bad=$(( $count_bad + 1))
    ! $finished && echo -e "\033[0;91mMistake\033[0m"
  else
    count_good=$(( $count_good + 1))
  fi
done 4< "$1"

printf "Score: %d%% (%d correct, %d incorrect lines)\n" $(( 100 * $count_good / $count_bad )) $count_good $count_bad
